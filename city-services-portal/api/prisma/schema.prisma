generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  role         String   // CITIZEN, CLERK, FIELD_AGENT, SUPERVISOR, ADMIN
  passwordHash String
  departmentId String?
  
  // Email verification
  emailConfirmed Boolean @default(false)
  emailConfirmationToken String?
  
  // Password reset
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  // Account status
  isActive Boolean @default(true)
  
  // Profile fields
  firstName    String?
  lastName     String?
  phone        String?
  alternatePhone String?
  streetAddress String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  
  // Preferences
  preferredLanguage String? @default("EN")
  communicationMethod String? @default("EMAIL")
  emailNotifications Boolean @default(true)
  smsNotifications Boolean @default(false)
  marketingEmails Boolean @default(false)
  serviceUpdates Boolean @default(true)
  twoFactorEnabled Boolean @default(false)
  securityQuestion String?
  securityAnswer String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department       Department?      @relation(fields: [departmentId], references: [id])
  createdRequests  ServiceRequest[] @relation("CreatedBy")
  assignedRequests ServiceRequest[] @relation("AssignedTo")
  comments         Comment[]
  attachments      Attachment[]
  assignments      Assignment[]     @relation("AssignedBy")
  assignedTasks    Assignment[]     @relation("AssignedTo")
  upvotes          Upvote[]

  // Supervisor role relations
  qualityReviews           QualityReview[]
  staffPerformance         StaffPerformance[]
  workloadAssignments      WorkloadAssignment[] @relation("WorkloadAssignee")
  supervisedAssignments    WorkloadAssignment[] @relation("WorkloadSupervisor")
  previousAssignments      WorkloadAssignment[] @relation("WorkloadPrevious")
  performanceGoalsAsUser   PerformanceGoal[]    @relation("GoalUser")
  performanceGoalsAsSupervisor PerformanceGoal[] @relation("GoalSupervisor")
  createdCollaborations    TeamCollaboration[]  @relation("CollaborationCreator")

  @@map("users")
}

model Department {
  id   String @id @default(uuid())
  name String
  slug String @unique

  users           User[]
  serviceRequests ServiceRequest[]
  
  // Supervisor role relations
  departmentMetrics   DepartmentMetrics[]
  staffPerformance    StaffPerformance[]
  teamCollaborations  TeamCollaboration[]

  @@map("departments")
}

model ServiceRequest {
  id           String    @id @default(uuid())
  code         String    @unique
  title        String
  description  String
  category     String
  priority     String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status       String    @default("DRAFT")  // DRAFT, SUBMITTED, TRIAGED, etc.
  
  // Date fields
  dateOfRequest DateTime
  
  // Location fields
  streetAddress String?
  city          String?
  postalCode    String?
  locationText  String
  landmark      String?
  accessInstructions String?
  lat           Float?
  lng           Float?
  
  // Contact fields
  contactMethod     String?    // EMAIL, PHONE, SMS
  email             String?
  phone             String?
  alternatePhone    String?
  bestTimeToContact String?
  
  // Mailing address
  mailingStreetAddress String?
  mailingCity          String?
  mailingPostalCode    String?
  
  // Issue details
  issueType         String?
  severity          Int?       // 1-10 scale
  isRecurring       Boolean    @default(false)
  isEmergency       Boolean    @default(false)
  hasPermits        Boolean    @default(false)
  
  // Service impact
  affectedServices  String?    // JSON array stored as string
  estimatedValue    Float?
  
  // Additional contacts (JSON array stored as string)
  additionalContacts String?
  
  // User experience
  satisfactionRating Int?      // 1-5 scale
  formComments       String?   // Additional comments from form (renamed to avoid conflict)
  
  // Legal and preferences
  agreesToTerms      Boolean   @default(true)
  wantsUpdates       Boolean   @default(true)
  
  // Scheduled service
  preferredDate      DateTime?
  preferredTime      String?
  
  // System fields
  createdBy    String
  assignedTo   String?
  departmentId String?
  version      Int       @default(1)
  slaDueAt     DateTime?
  closedAt     DateTime?
  reopenUntil  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  creator     User        @relation("CreatedBy", fields: [createdBy], references: [id])
  assignee    User?       @relation("AssignedTo", fields: [assignedTo], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  comments    Comment[]
  attachments Attachment[]
  assignments Assignment[]
  eventLogs   EventLog[]
  upvotes     Upvote[]
  
  // Supervisor role relations
  qualityReviews      QualityReview[]
  workloadAssignments WorkloadAssignment[]

  @@map("service_requests")
}

model Comment {
  id         String   @id @default(uuid())
  requestId  String
  authorId   String
  body       String
  visibility String   // PUBLIC, INTERNAL
  createdAt  DateTime @default(now())

  request ServiceRequest @relation(fields: [requestId], references: [id])
  author  User          @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Attachment {
  id           String   @id @default(uuid())
  requestId    String
  uploadedById String
  filename     String
  mime         String
  size         Int
  data         Bytes    // Store image data directly in database
  url          String?  // Optional external URL (for backward compatibility)
  createdAt    DateTime @default(now())

  request    ServiceRequest @relation(fields: [requestId], references: [id])
  uploadedBy User           @relation(fields: [uploadedById], references: [id])

  @@map("attachments")
}

model Assignment {
  id           String   @id @default(uuid())
  requestId    String
  assigneeId   String
  assignedById String
  assignedAt   DateTime @default(now())

  request    ServiceRequest @relation(fields: [requestId], references: [id])
  assignee   User           @relation("AssignedTo", fields: [assigneeId], references: [id])
  assignedBy User           @relation("AssignedBy", fields: [assignedById], references: [id])

  @@map("assignments")
}

model EventLog {
  id        String   @id @default(uuid())
  requestId String
  type      String
  payload   String   // JSON stored as string
  createdAt DateTime @default(now())

  request ServiceRequest @relation(fields: [requestId], references: [id])

  @@map("event_logs")
}

model Upvote {
  id        String   @id @default(uuid())
  userId    String
  requestId String
  createdAt DateTime @default(now())

  user    User           @relation(fields: [userId], references: [id])
  request ServiceRequest @relation(fields: [requestId], references: [id])

  @@unique([userId, requestId])
  @@map("upvotes")
}

model FeatureFlag {
  key   String @id
  value String // JSON stored as string

  @@map("feature_flags")
}

// Supervisor Role Extensions

model DepartmentMetrics {
  id           String   @id @default(uuid())
  departmentId String
  metricType   String   // "avgResolutionTime", "slaCompliance", "satisfaction", etc.
  value        Float
  period       String   // "daily", "weekly", "monthly", "quarterly"
  periodStart  DateTime
  periodEnd    DateTime
  calculatedAt DateTime @default(now())
  createdAt    DateTime @default(now())

  department Department @relation(fields: [departmentId], references: [id])

  @@unique([departmentId, metricType, period, periodStart])
  @@map("department_metrics")
}

model QualityReview {
  id                        String   @id @default(uuid())
  requestId                 String
  reviewerId                String
  qualityScore              Int      // Overall score 1-10
  communicationScore        Int      // 1-10 scale
  technicalAccuracyScore    Int      // 1-10 scale
  timelinessScore          Int      // 1-10 scale
  citizenSatisfactionScore Int      // 1-10 scale
  improvementSuggestions   String?
  followUpRequired         Boolean  @default(false)
  calibrationSession       String?  // Reference to training session
  reviewStatus             String   @default("COMPLETED") // PENDING, COMPLETED, ARCHIVED
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  request  ServiceRequest @relation(fields: [requestId], references: [id])
  reviewer User           @relation(fields: [reviewerId], references: [id])

  @@unique([requestId, reviewerId])
  @@map("quality_reviews")
}

model StaffPerformance {
  id                        String   @id @default(uuid())
  userId                    String
  departmentId              String
  performancePeriod         String   // "2024-Q1", "2024-01", etc.
  averageHandlingTime       Int      // in minutes
  completedRequests         Int      // number of requests completed
  qualityScore              Float?   // average quality review score
  citizenSatisfactionRating Float?   // average satisfaction from surveys
  overtimeHours             Float    @default(0.0)
  productivityScore         Float?   // calculated productivity metric
  goalsAchieved             Int      @default(0)
  goalsMissed              Int      @default(0)
  trainingHoursCompleted   Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@unique([userId, performancePeriod])
  @@map("staff_performance")
}

model WorkloadAssignment {
  id               String    @id @default(uuid())
  requestId        String
  assignedFrom     String?   // Previous assignee ID
  assignedTo       String    // Current assignee ID
  assignedBy       String    // Supervisor who made assignment
  assignmentReason String?   // Why this assignment was made
  workloadScore    Float?    // Algorithm-calculated workload impact (0-100)
  estimatedEffort  Int?      // Estimated hours to complete
  skillsRequired   String?   // JSON array of required skills
  priorityWeight   Float?    // Assignment priority weight
  isActive         Boolean   @default(true)
  completedAt      DateTime?
  createdAt        DateTime  @default(now())

  request      ServiceRequest @relation(fields: [requestId], references: [id])
  assignedUser User           @relation("WorkloadAssignee", fields: [assignedTo], references: [id])
  supervisor   User           @relation("WorkloadSupervisor", fields: [assignedBy], references: [id])
  previousUser User?          @relation("WorkloadPrevious", fields: [assignedFrom], references: [id])

  @@map("workload_assignments")
}

model PerformanceGoal {
  id          String    @id @default(uuid())
  userId      String
  supervisorId String
  title       String
  description String
  targetValue Float?    // Numeric target (e.g., resolution time < 24 hours)
  currentValue Float?   // Current progress
  unit        String?   // Unit of measurement (hours, requests, percentage)
  dueDate     DateTime
  status      String    @default("ACTIVE") // ACTIVE, ACHIEVED, MISSED, CANCELLED
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  user       User @relation("GoalUser", fields: [userId], references: [id])
  supervisor User @relation("GoalSupervisor", fields: [supervisorId], references: [id])

  @@map("performance_goals")
}

model TeamCollaboration {
  id              String   @id @default(uuid())
  departmentId    String
  collaborationType String // "STANDUP", "PEER_REVIEW", "KNOWLEDGE_SHARE", "TRAINING"
  title          String
  description    String?
  participants   String   // JSON array of user IDs
  scheduledAt    DateTime?
  completedAt    DateTime?
  outcome        String?  // Summary of results/outcomes
  actionItems    String?  // JSON array of follow-up actions
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id])
  creator    User       @relation("CollaborationCreator", fields: [createdBy], references: [id])

  @@map("team_collaborations")
}